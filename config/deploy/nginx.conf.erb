<% if fetch(:app_server) && (fetch(:app_server_socket) || fetch(:app_server_port))%>
# Define App Server Upstream
upstream <%= fetch(:application) %>-app-server {
<% if fetch(:app_server_socket) %>
  server unix:<%= fetch(:app_server_socket) %> fail_timeout=0;
<% elsif fetch(:app_server_port) %>
  server <%= fetch(:app_server_host, '127.0.0.1') %>:<%= fetch(:app_server_port) %> fail_timeout=0;
<% end %>
}
<% end %>

# HTTP Server

<% if fetch(:nginx_use_ssl) %>
server {
  listen 80;
  server_name <%= fetch(:nginx_domains) %>;
  rewrite ^(.*) https://$host$1 permanent;
}
<% end %>

server {

<% if fetch(:nginx_use_ssl) %>
  listen 443; # deferred;
  ssl on;
  ssl_certificate <%= fetch(:nginx_ssl_certificate_path) %>/<%= fetch(:nginx_ssl_certificate) %>;
  ssl_certificate_key <%= fetch(:nginx_ssl_certificate_key_path) %>/<%= fetch(:nginx_ssl_certificate_key) %>;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  # donâ€™t use SSLv3 ref: POODLE
<% else %>
  listen 80; # deferred;
<% end %>

  server_name <%= fetch(:nginx_domains) %>;
  root        <%= fetch(:deploy_to) %>/current/<%= fetch(:nginx_static_dir) %>;

  access_log <%= fetch(:nginx_log_path) %>/nginx-access.log;
  error_log  <%= fetch(:nginx_log_path) %>/nginx-error.log;

  error_page 404 /404.html;
  location /404.html { root <%= fetch(:deploy_to) %>/current/<%= fetch(:nginx_static_dir) %>; }

  error_page 500 /500.html;
  location /500.html { root <%= fetch(:deploy_to) %>/current/<%= fetch(:nginx_static_dir) %>; }

  keepalive_timeout 5;
  client_max_body_size 2G;
  client_body_in_file_only clean;
  client_body_buffer_size 32K;
  sendfile on;
  send_timeout 300s;

<% if fetch(:app_server) && (fetch(:app_server_socket) || fetch(:app_server_port))%>
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  try_files $uri/index.html $uri @<%= fetch(:application) %>-app-server;

  location @<%= fetch(:application) %>-app-server {
    gzip on;
    gzip_min_length  1100;
    gzip_buffers  4 32k;
    gzip_comp_level 4;
    gzip_types    text/plain application/x-javascript text/xml text/css;
    gzip_vary on;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #proxy_set_header Host $http_host;
    proxy_set_header Host $host;
  <% if fetch(:nginx_use_ssl) %>
    proxy_set_header X-Forwarded-Proto https;
  <% else %>
    proxy_set_header X-Forwarded-Proto http;
  <% end %>
    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://<%= fetch(:application) %>-app-server;
  }
<% end %>
}